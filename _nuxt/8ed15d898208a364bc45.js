(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{210:function(e,t,n){var content=n(220);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,n(48).default)("76239dcf",content,!0,{sourceMap:!1})},213:function(e,t,n){"use strict";var o=n(31),component=Object(o.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("p",[this._v("\n    This web app is intended for configuring WiFi credentials of headless IoT\n    devices over Bluetooth LE."),t("br"),this._v("\n    Since the web-bluetooth specification is not finalized yet, only Google\n    Chrome was validated to work on Mac OSX, Win 10, Android 9, and Ubuntu\n    Linux (with some modifications)."),t("br")]),this._v(" "),t("p",[this._v("\n    To use or test this app you will need a ESP32 dev board which will run a\n    matching application.\n  ")]),this._v(" "),t("p",[this._v("\n    The app allows setting only of password protected Access Points, since it\n    was built to complement an existing code base for the Arduino platform."),t("br"),this._v("\n    The ESP32 works only with 2.4 GHz WiFi, so APs set on other frequencies (5\n    GHz, soon 6 GHz) will not be displayed when used in conjunction with ESP32\n    based devices.\n  ")])])}],!1,null,null,null);t.a=component.exports},219:function(e,t,n){"use strict";var o=n(210);n.n(o).a},220:function(e,t,n){(t=n(47)(!1)).push([e.i,"#reltive-pos[data-v-1138bd5a]{align-self:right;position:relative;height:30em;overflow-y:scroll}",""]),e.exports=t},248:function(e,t,n){"use strict";n.r(t);var o={components:{Descript:n(213).a},head:function(){return{title:"About: ESP32 configuration tool built w/ Nuxt.js"}}},r=(n(219),n(31)),component=Object(r.a)(o,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("b-container",{attrs:{fluid:""}},[n("b-row",[n("b-col",{staticClass:"ml-2",attrs:{cols:"1"}},[n("b-navbar",{directives:[{name:"b-scrollspy",rawName:"v-b-scrollspy:reltive-pos",arg:"reltive-pos"}],staticClass:"flex-column"},[n("b-nav",{attrs:{pills:"",small:"",vertical:""}},[n("b-nav-item",{attrs:{href:"#about"}},[e._v("About")]),e._v(" "),n("b-nav-item",{attrs:{href:"#description"}},[e._v("Description")]),e._v(" "),n("b-nav-item",{attrs:{href:"#usage"}},[e._v("Usage")])],1)],1)],1),e._v(" "),n("b-col",{attrs:{col:"",cols:"1"}}),e._v(" "),n("b-col",{staticClass:"ml-2",attrs:{col:"",cols:"9"}},[n("div",{attrs:{id:"reltive-pos"}},[n("h2",{staticClass:"mb-6",attrs:{id:"about"}},[e._v("About")]),e._v(" "),n("p",{attrs:{id:"about-0"}},[e._v("\n          A web-ble implementation of Bernd Giesecke's\n          "),n("a",{attrs:{href:"https://desire.giesecke.tk/index.php/2018/04/06/esp32-wifi-setup-over-ble/"}},[e._v("\n            ESP32 WiFi configuration over BLE\n          ")]),e._v("\n          . Bernd's control app is Android only, while web-ble is being\n          developed as a web standard, and is available currently (05/2020) on\n          Chrome for OSX, Windows 10, and Android ( more details on\n          implementation status can be found\n          "),n("a",{attrs:{href:"https://github.com/WebBluetoothCG/web-bluetooth/blob/master/implementation-status.md"}},[e._v("\n            here")]),e._v("\n          ).\n        ")]),e._v(" "),n("p",{attrs:{id:"about-1"}},[e._v("\n          The repository for this app is hosted on github\n          "),n("a",{attrs:{href:"https://github.com/UriShX/Nuxt_esp32_web-ble_wifi_config"}},[e._v("here")]),e._v(". As implied by it's name, this web app was written using\n          "),n("a",{attrs:{href:"https://nuxtjs.org/"}},[e._v("NuxtJS")]),e._v(", a VueJS framework.\n        ")]),e._v(" "),n("p",{attrs:{id:"aout-2"}},[e._v("\n          An older version of this app, based on KnockdownJS and JQuery can be\n          found\n          "),n("a",{attrs:{href:"https://github.com/UriShX/esp32_web-ble_wifi_config"}},[e._v("here.")])]),e._v(" "),n("p",{attrs:{id:"about-3"}},[e._v("\n          The main reason for re-creating the app in a web framework was to\n          enable easier implementation as part of larger web applications,\n          such as, for eg., a web site which enables the connection of devices\n          to database for downloading and uploading data measured by the\n          device."),n("br"),e._v("\n          One further advantage is the creation of progressive web apps is\n          assisted by the framework, though it is not presently implemented.\n        ")]),e._v(" "),n("h3",{staticClass:"mb-6",attrs:{id:"description"}},[e._v("Description")]),e._v(" "),n("descript"),e._v(" "),n("h3",{staticClass:"mb-1",attrs:{id:"usage"}},[e._v("Usage")]),e._v(" "),n("p",{attrs:{id:"usage-0"}},[e._v('\n          Press the "Connect" button at the top right corner. The app searches\n          for Bluetooth-LE devices with a name that starts with "ESP32", and\n          has a predefined service UUID. Select the desired device from the\n          device selection menu, and press "Pair".'),n("br"),e._v("\n          Once paired, the app requests the credentials stored in the device's\n          memory."),n("br"),e._v("\n          Once the device responds, the app populates the SSID and password\n          fields from the ESP32 device."),n("br"),e._v("\n          The app then requests for both a list of SSIDs seen by the device,\n          as well as the connection status of the device - whether it is\n          connected to the first defined AP, the second, or none of them."),n("br"),e._v(" "),n("i",[e._v("\n            If the device does not support either of the last two functions\n            (which happens if the ESP32 is loaded with\n            "),n("a",{attrs:{href:"https://desire.giesecke.tk/index.php/2018/04/06/esp32-wifi-setup-over-ble/"}},[e._v("\n              beegee1962's original app\n            ")]),e._v("\n            ), these features fail gracefully, and simply outputs a DOM\n            exception to the console. ")]),n("br"),e._v("\n          You can then edit the desired fields:"),n("br")]),e._v(" "),n("ul",{attrs:{id:"usage-1"}},[n("li",[e._v('Enter SSID to "Primary defined SSID", or')]),e._v(" "),n("ul",[n("li",[e._v("\n              Select SSID from dropdown, populated from a list as seen by the\n              device.\n            ")])]),e._v(" "),n("li",[e._v("Enter a password matching the SSID selected.")]),e._v(" "),n("ul",[n("li",[e._v("\n              Pressing the Eye icon toggles show / hide of password field.\n            ")])]),e._v(" "),n("li",[e._v("Enable editing for the secondary password.")]),e._v(" "),n("li",[e._v("\n            If editing of the secondary SSID and password is enabled, you can\n            then edit the secondary SSID and password fields in the same\n            fashion.\n          ")]),e._v(" "),n("ul",[n("li",[n("i",[e._v("Note: If the editing of the secondary SSID credentials is\n                enabled, these fields "),n("u",[e._v("must not be empty")]),e._v(". If editing of\n                those fields is disabled and they are empty, the app will fill\n                them with the Primary's credentials before sending the\n                credentials to the device.")])])]),e._v(" "),n("li",[e._v("\n            A status box is displayed above the form fields. In it, the\n            current WiFi connection status of the ESP32 device to which the\n            app is connected. (If supported by the device).\n          ")]),e._v(" "),n("li",[e._v('\n            On the right side of the connection status box is a "Refresh"\n            button. Pressing this button will ask the device for the\n            configuration currently stored on it, and will therefore delete\n            any changes you have made\n          ')]),e._v(" "),n("li",[n("b",[e._v("Any changes will be deleted when disconnected from the device,\n              and form fields will not be available for editing")])])]),e._v(" "),n("p",{attrs:{id:"usage-2"}},[e._v('\n          After defining the crdentials, you can then press the "Configure\n          device" button to send the new configuration to the ESP32.'),n("br"),e._v('\n          Two more buttons are also provided: "Erase" - to erase the current\n          configured SSIDs and associated passwords, and "Reset" - to reset\n          the device when needed.'),n("br"),e._v('\n          Once done with the configuration, click "Disconnect", and the stored\n          SSIDs and credentials will be saved in the device\'s flash memory.\n          '),n("br"),e._v(" "),n("i",[e._v("\n            Notice: In order to configure WiFi credentials over BLE, an ESP32\n            device must be prepared with either of the following beforehand:\n          ")])]),e._v(" "),n("div",{attrs:{id:"usage-3"}},[n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/UriShX/esp32_wifi_ble_advanced"}},[e._v("\n                This app,\n              ")]),e._v("\n              which supports the SSID list and current connection status\n              reporting.\n            ")])]),e._v("\n          or\n          "),n("ul",[n("li",[n("a",{attrs:{href:"https://desire.giesecke.tk/index.php/2018/04/06/esp32-wifi-setup-over-ble/"}},[e._v("\n                Beegee1962's app ")]),e._v(", which does not.\n            ")])])])],1)])],1)],1)}),[],!1,null,"1138bd5a",null);t.default=component.exports}}]);