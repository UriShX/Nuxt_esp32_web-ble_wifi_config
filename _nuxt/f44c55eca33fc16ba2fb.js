(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{213:function(e,t,n){var content=n(223);"string"==typeof content&&(content=[[e.i,content,""]]),content.locals&&(e.exports=content.locals);(0,n(48).default)("78105e60",content,!0,{sourceMap:!1})},216:function(e,t,n){"use strict";var o=n(31),component=Object(o.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("p",[this._v("\n    This web app is intended for configuring WiFi credentials of headless IoT\n    devices over Bluetooth LE."),t("br"),this._v("\n    Since the web-bluetooth specification is not finalized yet, only Google\n    Chrome was validated to work on Mac OSX, Win 10, Android 9, and Ubuntu\n    Linux (with some modifications)."),t("br")]),this._v(" "),t("p",[this._v("\n    To use or test this app you will need a ESP32 dev board which will run a\n    matching application.\n  ")]),this._v(" "),t("p",[this._v("\n    The app allows setting only of password protected Access Points, since it\n    was built to complement an existing code base for the Arduino platform."),t("br"),this._v("\n    The ESP32 works only with 2.4 GHz WiFi, so APs set on other frequencies (5\n    GHz, soon 6 GHz) will not be displayed when used in conjunction with ESP32\n    based devices.\n  ")])])}],!1,null,null,null);t.a=component.exports},222:function(e,t,n){"use strict";var o=n(213);n.n(o).a},223:function(e,t,n){(t=n(47)(!1)).push([e.i,"#reltive-pos[data-v-16e16922]{align-self:right;position:relative;height:30em;overflow-y:scroll}",""]),e.exports=t},251:function(e,t,n){"use strict";n.r(t);var o={components:{Descript:n(216).a},head:function(){return{title:"About: ESP32 configuration tool built w/ Nuxt.js"}}},r=(n(222),n(31)),component=Object(r.a)(o,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("b-container",{attrs:{fluid:""}},[n("b-row",[n("b-col",{staticClass:"ml-2",attrs:{cols:"1"}},[n("b-navbar",{directives:[{name:"b-scrollspy",rawName:"v-b-scrollspy:reltive-pos",arg:"reltive-pos"}],staticClass:"flex-column"},[n("b-nav",{attrs:{pills:"",small:"",vertical:""}},[n("b-nav-item",{attrs:{to:"#about"}},[e._v("About")]),e._v(" "),n("b-nav-item",{attrs:{to:"#description"}},[e._v("Description")]),e._v(" "),n("b-nav-item",{attrs:{to:"#usage"}},[e._v("Usage")])],1)],1)],1),e._v(" "),n("b-col",{attrs:{col:"",cols:"1"}}),e._v(" "),n("b-col",{staticClass:"ml-2",attrs:{col:"",cols:"9"}},[n("div",{attrs:{id:"reltive-pos"}},[n("h2",{staticClass:"mb-6",attrs:{id:"about"}},[e._v("About")]),e._v(" "),n("p",[e._v("\n          A web-ble implementation of Bernd Giesecke's\n          "),n("a",{attrs:{href:"https://desire.giesecke.tk/index.php/2018/04/06/esp32-wifi-setup-over-ble/"}},[e._v("\n            ESP32 WiFi configuration over BLE\n          ")]),e._v("\n          . Bernd's control app is Android only, while web-ble is being\n          developed as a web standard, and is available currently (05/2020) on\n          Chrome for OSX, Windows 10, and Android ( more details on\n          implementation status can be found\n          "),n("a",{attrs:{href:"https://github.com/WebBluetoothCG/web-bluetooth/blob/master/implementation-status.md"}},[e._v("\n            here")]),e._v("\n          ).\n        ")]),e._v(" "),n("p",[e._v("\n          The repository for this app is hosted on github\n          "),n("a",{attrs:{href:"https://github.com/UriShX/esp32_web-ble_wifi_config"}},[e._v("here")]),e._v(".\n        ")]),e._v(" "),n("h3",{staticClass:"mb-6",attrs:{id:"description"}},[e._v("Description")]),e._v(" "),n("descript"),e._v(" "),n("h3",{staticClass:"mb-1",attrs:{id:"usage"}},[e._v("Usage")]),e._v(" "),n("p",[e._v('\n          Press the "Connect" button at the top right corner. The app searches\n          for BLE devices with a name that starts with "ESP32", and has a\n          predefined service UUID. Select the desired device from the device\n          selection menu, and press "Pair". Once paired, the app requests the\n          credentials stored in the device\'s memory. Once recieved, the app\n          populates the SSID and password fields from the data recieved from\n          the ESP32 device. You can then edit the desired fields, and then\n          press the "Configure device" button to send the new configuration to\n          the ESP32. Two more buttons are also provided: "Erase" - to erase\n          the current configured SSIDs and associated passwords, and "Reset" -\n          to reset the device when needed. Once done with the configuration,\n          click "Disconnect", and the stored SSIDs and credentials will be\n          saved in the device\'s flash memory.\n          '),n("br"),e._v(" "),n("i",[e._v("\n            Notice: In order to configure WiFi credentials over BLE, an ESP32\n            device must be prepared with\n            "),n("a",{attrs:{href:"https://desire.giesecke.tk/index.php/2018/04/06/esp32-wifi-setup-over-ble/"}},[e._v("\n              beegee1962's app\n            ")]),e._v("\n            beforehand.\n          ")])])],1)])],1)],1)}),[],!1,null,"16e16922",null);t.default=component.exports}}]);